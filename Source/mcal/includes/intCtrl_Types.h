/***********************************************************************************************************************************************************
 *	FILE DESCRIPTION
 *	------------------------------------------------------------------------------------------------------------------------------------------------------*/
/**		\file 	intCtrl_Types.h
 *		\brief 	interrupt Control Types header.
 *		\details
 *
 *
 *
 *********************************************************************************************************************************************************/
 
 #ifndef INTCTRL_TYPES_H
 #define INTCTRL_TYPES_H

/*********************************************************************************************************************************************************
 *	INCLUDES
 ********************************************************************************************************************************************************/

#include    "STD_TYPES.h"


/*********************************************************************************************************************************************************
 *	GLOBAL CONSTANTS MACROS
 ********************************************************************************************************************************************************/




/*********************************************************************************************************************************************************
 *	GLOBAL FUNCTION MACROS
 ********************************************************************************************************************************************************/




/*********************************************************************************************************************************************************
 *	GLOBAL DATA TYPES AND STRUCTURES
 ********************************************************************************************************************************************************/

typedef enum {
	RESET = 1,
	NMI,
	HARD_FAULT,
	MEMORY_MANAGEMENT,
	BUS_FAULT,
	USAGE_FAULT,
	SVC_CALL = 11,
	DEBUGE_MONITOR,
	PENDSV = 14,
	SYSTICK,
	INT_GPOI_PORTA = 16,
	INT_GPOI_PORTB,
	INT_GPOI_PORTC,
	INT_GPOI_PORTD,
	INT_GPOI_PORTE,
	INT_UART0,
	INT_UART1,
	INT_SSI0,
	INT_I2C0,
	INT_PWM0_FAULT,
	INT_PWM0_GENERATOR0,
	INT_PWM0_GENERATOR1,
	INT_PWM0_GENERATOR2,
	INT_QEI0,
	INT_ADC0_SEC0,
	INT_ADC0_SEC1,
	INT_ADC0_SEC2,
	INT_ADC0_SEC3,
	INT_WDT01,
	INT_TIMER_0A,
	INT_TIMER_0B,
	INT_TIMER_1A,
	INT_TIMER_1B,
	INT_TIMER_2A,
	INT_TIMER_2B,
	INT_ANALOG_COMP_0,
	INT_ANALOG_COMP_1,
	INT_SYS_CONTROL = 44,
	INT_FLASH_EEPROM_CTRL,
	INT_GPOI_PORTF,
	INT_UART2 = 49,
	INT_SSI1,
	INT_TIMER_3A,
	INT_TIMER_3B,
	INT_I2C1,
	INT_QEI1,
	INT_CAN0,
	INT_CAN1,
	INT_HIBERNATE = 59,
	INT_USB,
	INT_PWM_GENERATOR3,
	INT_UDMA_SW,
	NIT_UDMA_ERR,
	INT_ADC1_SEC0,
	INT_ADC1_SEC1,
	INT_ADC1_SEC2,
	INT_ADC1_SEC3,
	INT_SSI2 = 73,
	INT_SSI3,
	INT_UART3,
	INT_UART4,
	INT_UART5,
	INT_UART6,
	INT_UART7,
	INT_I2C = 84,
	INT_I2C3,
	INT_TIMER_4A,
	INT_TIMER_4B,
	INT_TIMER_5A = 108,
	INT_TIMER_5B,
	INT_TIMER_64_0A,
	INT_TIMER_64_0B,
	INT_TIMER_64_1A,
	INT_TIMER_64_1B,
	INT_TIMER_64_2A,
	INT_TIMER_64_2B,
	INT_TIMER_64_3A,
	INT_TIMER_64_3B,
	INT_TIMER_64_4A,
	INT_TIMER_64_4B,
	INT_TIMER_64_5A,
	INT_TIMER_64_5B,
	INT_SYS_EXCEPTION,
	INT_PWM1_GENERATOR0 = 150,
	INT_PWM1_GENERATOR1,
	INT_PWM1_GENERATOR2,
	INT_PWM1_GENERATOR3,
	INT_PWM1_FAULT
}intCtrl_ExceptionType;


/*********************************************************************************************************************************************************
 *	GLOBAL DATA PROTOTYPES
 ********************************************************************************************************************************************************/




/*********************************************************************************************************************************************************
 *	GLOBAL FUNCTION PROTOTYPES
 ********************************************************************************************************************************************************/




/*********************************************************************************************************************************************************
 *	\Syntax					:	void IntCtrl_Init(void)
 *	\Description		:	Initalize NVIC/SCB by parsing configuration 
											into NVIC/SCB registers.
 *
 *	\Sync\Async				:	Synchronous
 *	\Reentrancy				:	Non Reentrant
 *	\Parameters	(in)	:	None
 *	\Parameters	(out)	:	None
 *	\Return value			:	None
 ********************************************************************************************************************************************************/



#endif /*intCtrl_Types.h*/
/*********************************************************************************************************************************************************
 *	END OF FILE intCtrl_Types.h
 ********************************************************************************************************************************************************/